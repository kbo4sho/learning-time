name: Generate Game of the Day with Assistant

on:
  schedule:
    - cron: '0 0 * * *'  # every day at midnight UTC
  workflow_dispatch:      # allows manual triggering from GitHub UI

jobs:
  generate_game:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install openai

      - name: Generate Game using OpenAI Assistant
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python .github/scripts/generate_game_with_assistant.py

      - name: Test Functionality
        run: |
          python .github/scripts/test_functionality.py
          echo "Functionality testing completed"

      - name: Verify Functionality Standards
        run: |
          # Check if the latest game meets functionality standards
          python -c "
          import json
          import glob
          import os
          
          # Find the most recent game file
          game_files = sorted(glob.glob('games/2025-*.js'))
          if not game_files:
              print('‚ùå No game files found')
              exit(1)
              
          latest_game = game_files[-1]
          game_date = os.path.basename(latest_game).replace('.js', '')
          meta_file = f'games/{game_date}.meta.json'
          
          print(f'Latest game: {latest_game}')
          print(f'Meta file: {meta_file}')
          
          if os.path.exists(meta_file):
              with open(meta_file, 'r') as f:
                  metadata = json.load(f)
              
              # Check for new functionality metadata format
              if 'final_functionality' in metadata:
                  functionality = metadata['final_functionality']
                  score = functionality['percentage']
                  passing = functionality['passing']
                  
                  print(f'üîç Functionality Score: {score:.1f}%')
                  print(f'Status: {\"‚úÖ PASSING\" if passing else \"‚ùå FAILING\"}')
                  
                  if not passing:
                      print('‚ùå Game does not meet functionality standards!')
                      print('Issues:')
                      for issue in functionality['issues']:
                          print(f'  - {issue}')
                      exit(1)
                  else:
                      print('‚úÖ Game meets functionality standards!')
              # Check for old functionality metadata format
              elif 'functionality' in metadata:
                  functionality = metadata['functionality']
                  score = functionality['percentage']
                  passing = functionality['passing']
                  
                  print(f'üîç Functionality Score: {score:.1f}%')
                  print(f'Status: {\"‚úÖ PASSING\" if passing else \"‚ùå FAILING\"}')
                  
                  if not passing:
                      print('‚ùå Game does not meet functionality standards!')
                      print('Issues:')
                      for issue in functionality['issues']:
                          print(f'  - {issue}')
                      exit(1)
                  else:
                      print('‚úÖ Game meets functionality standards!')
              else:
                  print('‚ö†Ô∏è  No functionality data found in metadata')
                  print('This appears to be an older game without functionality testing.')
                  print('‚úÖ Proceeding with deployment (legacy game)')
          else:
              print('‚ö†Ô∏è  No metadata file found for latest game')
              print('‚úÖ Proceeding with deployment (no metadata available)')
          "

      - name: Commit and push new game
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add games/
          git commit -m "Add new game of the day with functionality testing"
          git push origin main