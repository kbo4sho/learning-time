{
  "generated_date": "2025-08-08",
  "generated_timestamp": "2025-08-08T00:23:21.985369",
  "model": "gpt-4.1-mini",
  "theme": "open world exploration",
  "prompt": "You are an expert educational game designer. Each day, you will generate a fun, playable math game in JavaScript for children ages 7 to 9, focused on foundational concepts. Today's theme: open world exploration\n\nThe game must:\n\u2022 Be engaging and fun first by having a primary visually interesting game mechanic, age-appropriate, and suitable for early learners.\n\u2022 Reinforce the math concept through a real-world narratives tied to theme.\n\u2022 Include fun, unique memorable characters tied to the theme.\n\u2022 Use visually calming and interesting and wacky elements.\n\u2022 Include sound, using the Web Audio API for correct/incorrect feedback, gentle background effects, or interactions.\n\u2022 Render entirely inside the existing HTML element with ID game-of-the-day-stage. You may create a <canvas> inside it.\n\u2022 Have a game area exactly 720px wide by 480px tall.\n\u2022 Be written in clean, readable JavaScript with proper formatting, indentation, and comments.\n\u2022 Use modern JavaScript practices and avoid minification.\n\u2022 Include proper error handling for audio and resource loading.\n\u2022 Be accessible: include keyboard controls, text alternatives, visual cues for audio, clear instructions, and error handling.\n\u2022 Use ONLY canvas-drawn graphics and Web Audio API - NO external image URLs, NO external audio files, NO external dependencies.\n\u2022 Create all visual elements using canvas drawing methods (rect, arc, fillText, etc.).\n\u2022 Generate all sounds using Web Audio API oscillators and filters.\n\u2022 Include proper error handling for audio context creation.\n\u2022 Output only JavaScript code. No extra explanation, no markdown formatting, no code blocks, no HTML, no CSS.\n\u2022 Do not wrap the code in ```javascript or any other markdown formatting.",
  "response_tokens": 5914,
  "game_filename": "2025-08-08.js",
  "game_size_bytes": 20383,
  "functionality": {
    "score": 8,
    "max_score": 8,
    "percentage": 100.0,
    "passing": true,
    "issues": [],
    "warnings": []
  },
  "dependencies": {
    "has_external_deps": false,
    "issues": [],
    "warnings": [],
    "canvas_methods_used": 6
  },
  "improved_visuals_audio": true,
  "improve_prompt": "You are an expert educational game designer. \nTake the following JavaScript game code and improve ONLY the visuals and audio. \nDo not change the game mechanics or math logic. \nEnhance the visual appeal (colors, animations, backgrounds, characters), avoid overstimulation with sounds and visuals, and add or improve sound effects and background audio. \nRender entirely inside the existing HTML element with ID game-of-the-day-stage. You may create a <canvas> inside it.\nHave a game area exactly 720px wide by 480px tall.\nBe written in clean, readable JavaScript with proper formatting, indentation, and comments.\nUse modern JavaScript practices and avoid minification.\nInclude proper error handling for audio and resource loading.\nUse ONLY canvas-drawn graphics and Web Audio API - NO external image URLs, NO external audio files, NO external dependencies.\nCreate all visual elements using canvas drawing methods (rect, arc, fillText, etc.).\nGenerate all sounds using Web Audio API oscillators and filters.\nInclude proper error handling for audio context creation.\nOutput only JavaScript code. No extra explanation, no markdown formatting, no code blocks.\nDo not wrap the code in ```javascript or any other markdown formatting.\n\n---\n(() => {\n  // Strict mode for best practices\n  \"use strict\";\n\n  // Constants for canvas size\n  const WIDTH = 720;\n  const HEIGHT = 480;\n\n  // Get the container element\n  const container = document.getElementById(\"game-of-the-day-stage\");\n\n  if (!container) {\n    console.error(\"Container with ID 'game-of-the-day-stage' not found.\");\n    return;\n  }\n\n  // Clear container and create canvas\n  container.innerHTML = \"\";\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = WIDTH;\n  canvas.height = HEIGHT;\n  canvas.tabIndex = 0; // make canvas focusable for keyboard control\n  container.appendChild(canvas);\n\n  const ctx = canvas.getContext(\"2d\");\n\n  // === Audio Setup ===\n  let audioCtx;\n  try {\n    audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n  } catch (e) {\n    console.error(\"Web Audio API is not supported in this browser\");\n  }\n\n  // Sound manager with simple oscillator sounds for feedback\n  const SoundManager = (() => {\n    const playTone = (freq, duration = 300, type = \"sine\", volume = 0.2) => {\n      if (!audioCtx) return;\n      try {\n        const oscillator = audioCtx.createOscillator();\n        const gainNode = audioCtx.createGain();\n        oscillator.type = type;\n        oscillator.frequency.value = freq;\n        gainNode.gain.setValueAtTime(volume, audioCtx.currentTime);\n        oscillator.connect(gainNode);\n        gainNode.connect(audioCtx.destination);\n        oscillator.start();\n        gainNode.gain.exponentialRampToValueAtTime(0.001, audioCtx.currentTime + duration / 1000);\n        oscillator.stop(audioCtx.currentTime + duration / 1000);\n      } catch (e) {\n        console.warn(\"Audio play error:\", e);\n      }\n    };\n\n    // Background gentle sound using noise buffer passed through filter\n    let bgGainNode;\n    let noiseSource;\n    const startBackground = () => {\n      if (!audioCtx) return;\n      try {\n        const bufferSize = 2 * audioCtx.sampleRate;\n        const noiseBuffer = audioCtx.createBuffer(1, bufferSize, audioCtx.sampleRate);\n        const output = noiseBuffer.getChannelData(0);\n        for (let i = 0; i < bufferSize; i++) {\n          output[i] = (Math.random() * 2 - 1) * 0.1;\n        }\n        noiseSource = audioCtx.createBufferSource();\n        noiseSource.buffer = noiseBuffer;\n        noiseSource.loop = true;\n\n        const filter = audioCtx.createBiquadFilter();\n        filter.type = \"lowpass\";\n        filter.frequency.setValueAtTime(400, audioCtx.currentTime);\n\n        bgGainNode = audioCtx.createGain();\n        bgGainNode.gain.setValueAtTime(0.07, audioCtx.currentTime);\n\n        noiseSource.connect(filter);\n        filter.connect(bgGainNode);\n        bgGainNode.connect(audioCtx.destination);\n        noiseSource.start();\n      } catch (e) {\n        console.warn(\"Background audio error:\", e);\n      }\n    };\n\n    const stopBackground = () => {\n      if (noiseSource) {\n        noiseSource.stop();\n      }\n    };\n\n    return {\n      playCorrect: () => playTone(523.25, 250, \"triangle\", 0.3), // C5 triangle wave for correct\n      playIncorrect: () => playTone(196, 350, \"sawtooth\", 0.3), // G3 sawtooth wave for incorrect\n      startBackground,\n      stopBackground,\n    };\n  })();\n\n  // === Game Variables ===\n\n  // Exploration math concept: child explores a wacky island collecting numeric treasures.\n  // They solve addition problems to unlock paths and reach new areas.\n\n  // Characters - quirky explorer and animal friends\n  class Character {\n    constructor(name, color, x, y) {\n      this.name = name;\n      this.color = color;\n      this.x = x;\n      this.y = y;\n      this.radius = 22;\n    }\n    draw(ctx) {\n      // Draw a quirky round body with goofy eyes and smile\n      ctx.save();\n      ctx.translate(this.x, this.y);\n      // Body\n      ctx.fillStyle = this.color;\n      ctx.beginPath();\n      ctx.ellipse(0, 0, this.radius, this.radius * 1.3, Math.sin(Date.now()/500) * 0.1, 0, 2 * Math.PI);\n      ctx.fill();\n\n      // Eyes\n      ctx.fillStyle = \"#fff\";\n      ctx.beginPath();\n      ctx.arc(-8, -5, 6, 0, 2 * Math.PI);\n      ctx.arc(8, -5, 6, 0, 2 * Math.PI);\n      ctx.fill();\n\n      // Pupils\n      ctx.fillStyle = \"#000\";\n      const pupilOffsetX = Math.sin(Date.now() / 400) * 2;\n      const pupilOffsetY = Math.cos(Date.now() / 400) * 1.5;\n      ctx.beginPath();\n      ctx.arc(-8 + pupilOffsetX, -5 + pupilOffsetY, 3, 0, 2 * Math.PI);\n      ctx.arc(8 + pupilOffsetX, -5 + pupilOffsetY, 3, 0, 2 * Math.PI);\n      ctx.fill();\n\n      // Smile\n      ctx.strokeStyle = \"#000\";\n      ctx.lineWidth = 2;\n      ctx.beginPath();\n      ctx.arc(0, 10, 12, 0, Math.PI, false);\n      ctx.stroke();\n\n      ctx.restore();\n    }\n  }\n\n  // Friendly island critters with wild colors\n  class Critter {\n    constructor(name, color, x, y) {\n      this.name = name;\n      this.color = color;\n      this.x = x;\n      this.y = y;\n      this.size = 16;\n      this.wigglePhase = Math.random() * Math.PI * 2;\n    }\n    update(deltaTime) {\n      this.wigglePhase += deltaTime * 0.01;\n      this.y += Math.sin(this.wigglePhase) * 0.15;\n    }\n    draw(ctx) {\n      ctx.save();\n      ctx.translate(this.x, this.y);\n      // Body is star with wacky eyes\n      ctx.fillStyle = this.color;\n      const points = 5;\n      const outerRadius = this.size;\n      const innerRadius = this.size / 2.5;\n      ctx.beginPath();\n      for (let i = 0; i < points * 2; i++) {\n        const r = (i % 2 === 0) ? outerRadius : innerRadius;\n        const angle = (Math.PI / points) * i;\n        ctx.lineTo(r * Math.cos(angle), r * Math.sin(angle));\n      }\n      ctx.closePath();\n      ctx.fill();\n\n      // Eyes with pupil animation\n      ctx.fillStyle = \"#fff\";\n      ctx.beginPath();\n      ctx.arc(-6, -3, 5, 0, 2 * Math.PI);\n      ctx.arc(6, -3, 5, 0, 2 * Math.PI);\n      ctx.fill();\n\n      ctx.fillStyle = \"#000\";\n      const pupilXOffset = Math.sin(Date.now() / 300) * 1.5;\n      const pupilYOffset = Math.cos(Date.now() / 300) * 1;\n      ctx.beginPath();\n      ctx.arc(-6 + pupilXOffset, -3 + pupilYOffset, 2.5, 0, 2 * Math.PI);\n      ctx.arc(6 + pupilXOffset, -3 + pupilYOffset, 2.5, 0, 2 * Math.PI);\n      ctx.fill();\n\n      ctx.restore();\n    }\n  }\n\n  // Treasure chests contain math problems to unlock\n  class Treasure {\n    constructor(x, y, a, b) {\n      this.x = x;\n      this.y = y;\n      this.width = 50;\n      this.height = 40;\n      this.a = a; // number one in addition\n      this.b = b; // number two in addition\n      this.opened = false;\n    }\n    draw(ctx) {\n      ctx.save();\n      ctx.translate(this.x, this.y);\n\n      // Box base\n      ctx.fillStyle = this.opened ? \"#ffd24d\" : \"#8b5e3c\";\n      ctx.strokeStyle = \"#533d1a\";\n      ctx.lineWidth = 3;\n      ctx.fillRect(0, 0, this.width, this.height);\n      ctx.strokeRect(0, 0, this.width, this.height);\n\n      // Lid\n      ctx.fillStyle = this.opened ? \"#fffa9e\" : \"#6b4728\";\n      ctx.beginPath();\n      ctx.moveTo(0, 0);\n      ctx.lineTo(this.width / 2, -this.height / 2);\n      ctx.lineTo(this.width, 0);\n      ctx.closePath();\n      ctx.fill();\n      ctx.stroke();\n\n      if (!this.opened) {\n        // Show the math prompt \"a + b = ?\"\n        ctx.fillStyle = \"#fff\";\n        ctx.font = \"bold 18px Comic Sans MS, cursive, sans-serif\";\n        ctx.textAlign = \"center\";\n        ctx.fillText(`${this.a} + ${this.b} = ?`, this.width / 2, this.height + 20);\n      } else {\n        ctx.fillStyle = \"#553700\";\n        ctx.font = \"bold 22px Comic Sans MS, cursive, sans-serif\";\n        ctx.textAlign = \"center\";\n        ctx.fillText(`\u2714\ufe0f ${this.a + this.b}`, this.width / 2, this.height / 2 + 7);\n      }\n\n      ctx.restore();\n    }\n\n    containsPoint(px, py) {\n      return (\n        px >= this.x &&\n        px <= this.x + this.width &&\n        py >= this.y &&\n        py <= this.y + this.height\n      );\n    }\n  }\n\n  // Map with multiple spots\n  // Player moves across a colorful \"island\" with wide grassy fields and wacky plants.\n\n  // Background drawing function - calm pastel colors with quirky trees\n  function drawBackground(ctx) {\n    // Sky gradient\n    const skyGrad = ctx.createLinearGradient(0, 0, 0, HEIGHT);\n    skyGrad.addColorStop(0, \"#c8e7f9\");\n    skyGrad.addColorStop(1, \"#90caf9\");\n    ctx.fillStyle = skyGrad;\n    ctx.fillRect(0, 0, WIDTH, HEIGHT);\n\n    // Soft rolling hills\n    const hillColors = [\"#97c997\", \"#81b581\", \"#6a9f6a\"];\n    const hillBaseY = HEIGHT - 120;\n    for (let i = 0; i < 4; i++) {\n      ctx.fillStyle = hillColors[i % hillColors.length];\n      ctx.beginPath();\n      ctx.moveTo(i * 180 - 90, HEIGHT);\n      for (let x = i * 180 - 90; x <= (i + 1) * 180 + 90; x++) {\n        const y = hillBaseY + 40 * Math.sin((x / 180 + i) * Math.PI) * 0.6;\n        ctx.lineTo(x, y);\n      }\n      ctx.lineTo((i + 1) * 180 + 90, HEIGHT);\n      ctx.closePath();\n      ctx.fill();\n    }\n\n    // Wacky tree drawing\n    function drawWackyTree(x, y, scale) {\n      ctx.save();\n      ctx.translate(x, y);\n      ctx.scale(scale, scale);\n\n      // Trunk\n      ctx.fillStyle = \"#6a3e1a\";\n      ctx.fillRect(-8, 0, 16, 70);\n\n      // Leaves - multiple pastel blob shapes layered\n      const leafColors = [\"#a1e3a1\", \"#76d676\", \"#5ec35e\"];\n      for (let i = 0; i < 5; i++) {\n        ctx.fillStyle = leafColors[i % leafColors.length];\n        ctx.beginPath();\n        const angle = (i * Math.PI/3);\n        const lx = 20 * Math.cos(angle);\n        const ly = -30 + 20 * Math.sin(angle);\n        ctx.ellipse(lx, ly, 25, 40, angle * 0.9, 0, 2 * Math.PI);\n        ctx.fill();\n      }\n      ctx.restore();\n    }\n\n    // Scatter wacky trees\n    drawWackyTree(90, HEIGHT - 160, 1.2);\n    drawWackyTree(200, HEIGHT - 140, 1.0);\n    drawWackyTree(470, HEIGHT - 170, 1.4);\n    drawWackyTree(610, HEIGHT - 150, 1.1);\n  }\n\n  // === Game State ===\n  let lastTimestamp = 0;\n  let keysPressed = {};\n  let treasures = [];\n  let critters = [];\n  let player;\n  let currentTreasure = null; // treasure currently interacted with\n  let mathAnswerInput = \"\"; // player input for math problem\n  let showingInstructions = true;\n  let feedbackMessage = \"\";\n  let feedbackTimer = 0;\n  let bgMusicStarted = false;\n\n  // UI Colors\n  const uiTextColor = \"#333\";\n  const uiBackgroundColor = \"rgba(255,255,255,0.8)\";\n\n  // Initialize game state\n  function init() {\n    // Create player in starting position\n    player = new Character(\"Explorer Ella\", \"#ed7d31\", WIDTH / 8, HEIGHT - 160);\n\n    // Add critters (friends)\n    critters = [\n      new Critter(\"Ziggy\", \"#d65f5f\", 350, HEIGHT - 120),\n      new Critter(\"Bloop\", \"#4da6ff\", 590, HEIGHT - 130),\n      new Critter(\"Mimi\", \"#ff90e8\", 500, HEIGHT - 110),\n    ];\n\n    // Add treasures with simple addition problems - spaced across map\n    treasures = [\n      new Treasure(250, HEIGHT - 140, 3, 6),\n      new Treasure(420, HEIGHT - 130, 5, 4),\n      new Treasure(600, HEIGHT - 140, 7, 2),\n    ];\n\n    currentTreasure = null;\n    mathAnswerInput = \"\";\n    feedbackMessage = \"\";\n    feedbackTimer = 0;\n    showingInstructions = true;\n  }\n\n  // Draw instructions overlay\n  function drawInstructions(ctx) {\n    ctx.save();\n    ctx.fillStyle = uiBackgroundColor;\n    ctx.fillRect(40, 50, WIDTH - 80, HEIGHT - 100);\n\n    ctx.fillStyle = uiTextColor;\n    ctx.font = \"22px Comic Sans MS, cursive, sans-serif\";\n    ctx.textAlign = \"center\";\n    ctx.fillText(\"Welcome Explorer!\", WIDTH / 2, 100);\n    ctx.font = \"18px Comic Sans MS, cursive, sans-serif\";\n    ctx.fillText(\"Help Explorer Ella collect treasures on the island.\", WIDTH / 2, 140);\n    ctx.fillText(\"Solve the addition problems to unlock each treasure chest.\", WIDTH / 2, 170);\n    ctx.fillText(\"Use arrow keys or WASD to move.\", WIDTH / 2, 200);\n    ctx.fillText(\"Press Enter to answer when near a treasure.\", WIDTH / 2, 230);\n    ctx.fillText(\"Type your answer, then press Enter to submit.\", WIDTH / 2, 260);\n    ctx.fillText(\"Press Escape to close this help.\", WIDTH / 2, 290);\n\n    // Visual cue for keyboard (simple)\n    ctx.fillStyle = \"#666\";\n    ctx.font = \"14px monospace\";\n    ctx.fillText(\"\u2191 W | \u2193 S | \u2190 A | \u2192 D | Enter | Escape\", WIDTH / 2, 320);\n\n    ctx.restore();\n  }\n\n  // Draw feedback message box\n  function drawFeedback(ctx) {\n    if (!feedbackMessage) return;\n    ctx.save();\n    ctx.fillStyle = uiBackgroundColor;\n    ctx.strokeStyle = \"#555\";\n    ctx.lineWidth = 2;\n    const boxWidth = 360;\n    const boxHeight = 70;\n    const x = WIDTH / 2 - boxWidth / 2;\n    const y = HEIGHT / 2 - boxHeight / 2;\n    ctx.fillRect(x, y, boxWidth, boxHeight);\n    ctx.strokeRect(x, y, boxWidth, boxHeight);\n\n    ctx.fillStyle = \"#222\";\n    ctx.font = \"bold 22px Comic Sans MS, cursive, sans-serif\";\n    ctx.textAlign = \"center\";\n    ctx.fillText(feedbackMessage, WIDTH / 2, y + boxHeight / 2 + 8);\n    ctx.restore();\n  }\n\n  // Draw all game elements\n  function draw(deltaTime) {\n    ctx.clearRect(0, 0, WIDTH, HEIGHT);\n\n    drawBackground(ctx);\n\n    // Draw treasures first (behind player)\n    treasures.forEach(t => t.draw(ctx));\n\n    // Draw friendly critters\n    critters.forEach(c => c.draw(ctx));\n\n    // Draw player\n    player.draw(ctx);\n\n    // Draw UI panel bottom\n    ctx.save();\n    ctx.fillStyle = \"#e2f4e5\";\n    ctx.fillRect(0, HEIGHT - 60, WIDTH, 60);\n\n    ctx.fillStyle = \"#2d5031\";\n    ctx.font = \"bold 20px Comic Sans MS, cursive, sans-serif\";\n    ctx.textAlign = \"left\";\n    ctx.fillText(\"Explorer Ella\", 12, HEIGHT - 30);\n\n    // If interacting with treasure, show problem and input\n    if (currentTreasure) {\n      ctx.textAlign = \"center\";\n\n      // Draw input box\n      const boxX = WIDTH / 2 - 110;\n      const boxY = HEIGHT - 55;\n      const boxW = 220;\n      const boxH = 45;\n      ctx.fillStyle = \"#fff\";\n      ctx.strokeStyle = \"#2d5031\";\n      ctx.lineWidth = 3;\n      ctx.fillRect(boxX, boxY, boxW, boxH);\n      ctx.strokeRect(boxX, boxY, boxW, boxH);\n\n      ctx.fillStyle = \"#000\";\n      ctx.font = \"20px Comic Sans MS, cursive, sans-serif\";\n      ctx.fillText(\n        `What is ${currentTreasure.a} + ${currentTreasure.b}?`,\n        WIDTH / 2,\n        boxY + 24\n      );\n\n      ctx.font = \"bold 26px monospace\";\n      ctx.fillText(\n        mathAnswerInput || \"_\",\n        WIDTH / 2,\n        boxY + 43\n      );\n\n      // Accessibility info\n      ctx.font = \"14px Comic Sans MS, cursive, sans-serif\";\n      ctx.fillStyle = \"#444\";\n      ctx.fillText(\n        \"Type answer, press Enter to submit, Esc to cancel\",\n        WIDTH/2,\n        boxY + boxH + 18\n      );\n    } else {\n      ctx.font = \"16px Comic Sans MS, cursive, sans-serif\";\n      ctx.fillText(\"Move near a treasure and press Enter to solve the addition problem!\", WIDTH/2, HEIGHT - 30);\n      ctx.textAlign = \"right\";\n      ctx.fillText(\"Press H for help\", WIDTH - 12, HEIGHT - 30);\n    }\n\n    ctx.restore();\n\n    // Draw feedback message if shown\n    drawFeedback(ctx);\n\n    // Draw audio visual cue (simple speaker icon)\n    ctx.save();\n    ctx.fillStyle = \"#2d5031\";\n    ctx.font = \"20px monospace\";\n    ctx.textAlign = \"right\";\n    ctx.fillText(\"\ud83c\udfb5\", WIDTH - 12, 28);\n    ctx.restore();\n\n    // If showing instructions overlay\n    if (showingInstructions) {\n      drawInstructions(ctx);\n    }\n  }\n\n  // === Input Handling ===\n  canvas.addEventListener(\"keydown\", (e) => {\n    e.preventDefault();\n    const key = e.key.toLowerCase();\n    if (showingInstructions) {\n      // Close instructions on Escape or Enter\n      if (key === \"escape\" || key === \"enter\") {\n        showingInstructions = false;\n      }\n      return;\n    }\n\n    if (currentTreasure) {\n      // Currently typing an answer\n      if (key === \"escape\") {\n        // Cancel input\n        currentTreasure = null;\n        mathAnswerInput = \"\";\n        feedbackMessage = \"Answer cancelled\";\n        feedbackTimer = Date.now();\n      } else if (key === \"enter\") {\n        // Submit answer\n        if (mathAnswerInput.length === 0) {\n          feedbackMessage = \"Please type an answer before submitting.\";\n          feedbackTimer = Date.now();\n        } else {\n          const playerAnswer = parseInt(mathAnswerInput);\n          if (playerAnswer === currentTreasure.a + currentTreasure.b) {\n            // Correct\n            currentTreasure.opened = true;\n            feedbackMessage = \"Correct! Treasure unlocked!\";\n            SoundManager.playCorrect();\n            currentTreasure = null;\n            mathAnswerInput = \"\";\n          } else {\n            // Incorrect\n            feedbackMessage = \"Oops! Try again.\";\n            SoundManager.playIncorrect();\n            mathAnswerInput = \"\";\n          }\n          feedbackTimer = Date.now();\n        }\n      } else if (/^[0-9]$/.test(key)) {\n        if (mathAnswerInput.length < 3) {\n          mathAnswerInput += key;\n        }\n      } else if (key === \"backspace\") {\n        mathAnswerInput = mathAnswerInput.slice(0, -1);\n      }\n      return;\n    }\n\n    // Movement keys\n    if (key === \"arrowleft\" || key === \"a\") keysPressed.left = true;\n    if (key === \"arrowright\" || key === \"d\") keysPressed.right = true;\n    if (key === \"arrowup\" || key === \"w\") keysPressed.up = true;\n    if (key === \"arrowdown\" || key === \"s\") keysPressed.down = true;\n\n    // Interact with treasure - Enter key\n    if (key === \"enter\") {\n      // See if near any unopened treasure\n      let found = false;\n      treasures.forEach(t => {\n        if (!t.opened) {\n          const distX = player.x - (t.x + t.width / 2);\n          const distY = player.y - (t.y + t.height / 2);\n          const dist = Math.sqrt(distX * distX + distY * distY);\n          if (dist < 60) {\n            currentTreasure = t;\n            mathAnswerInput = \"\";\n            feedbackMessage = \"\";\n            found = true;\n          }\n        }\n      });\n      if (!found) {\n        feedbackMessage = \"No treasure nearby to open.\";\n        feedbackTimer = Date.now();\n      }\n    }\n\n    // Show instructions\n    if (key === \"h\") {\n      showingInstructions = true;\n    }\n  });\n\n  canvas.addEventListener(\"keyup\", (e) => {\n    const key = e.key.toLowerCase();\n    if (key === \"arrowleft\" || key === \"a\") keysPressed.left = false;\n    if (key === \"arrowright\" || key === \"d\") keysPressed.right = false;\n    if (key === \"arrowup\" || key === \"w\") keysPressed.up = false;\n    if (key === \"arrowdown\" || key === \"s\") keysPressed.down = false;\n  });\n\n  // For accessibility, allow canvas to be focused by clicking\n  canvas.addEventListener(\"click\", () => {\n    canvas.focus();\n  });\n\n  // === Game Update ===\n  function update(deltaTime) {\n    if (showingInstructions) {\n      // Don't update gameplay if showing instructions\n      if (!bgMusicStarted) {\n        SoundManager.startBackground();\n        bgMusicStarted = true;\n      }\n      return;\n    }\n\n    if (!bgMusicStarted) {\n      SoundManager.startBackground();\n      bgMusicStarted = true;\n    }\n\n    // Update critters (wiggle)\n    critters.forEach(c => c.update(deltaTime));\n\n    // Chase movement only if not answering math\n    if (!currentTreasure) {\n      let speed = 120; // pixels per second\n      let dx = 0;\n      let dy = 0;\n      if (keysPressed.left) dx -= 1;\n      if (keysPressed.right) dx += 1;\n      if (keysPressed.up) dy -= 1;\n      if (keysPressed.down) dy += 1;\n\n      if (dx !== 0 || dy !== 0) {\n        // Normalize diagonal movement speed\n        const length = Math.sqrt(dx * dx + dy * dy);\n        dx /= length;\n        dy /= length;\n      }\n\n      player.x += dx * speed * (deltaTime / 1000);\n      player.y += dy * speed * (deltaTime / 1000);\n\n      // Boundary clamp\n      player.x = Math.min(Math.max(player.radius, player.x), WIDTH - player.radius);\n      player.y = Math.min(Math.max(player.radius + 25, player.y), HEIGHT - player.radius - 50);\n    }\n\n    // Feedback message timeout\n    if (feedbackMessage) {\n      if (Date.now() - feedbackTimer > 3000) {\n        feedbackMessage = \"\";\n      }\n    }\n  }\n\n  // === Main Game Loop ===\n  function gameLoop(timestamp = 0) {\n    if (!lastTimestamp) lastTimestamp = timestamp;\n    const deltaTime = timestamp - lastTimestamp;\n    lastTimestamp = timestamp;\n\n    update(deltaTime);\n    draw(deltaTime);\n\n    window.requestAnimationFrame(gameLoop);\n  }\n\n  // Initialize and start game\n  init();\n  gameLoop();\n\n  // Accessibility focus instructions for screen readers\n  if (container) {\n    container.setAttribute(\"role\", \"application\");\n    container.setAttribute(\"aria-label\", \"Math exploration game: Move Explorer Ella using arrow keys or WASD. Approach treasure chests and press Enter to solve addition problems.\");\n  }\n})();\n---\n",
  "improve_response_tokens": 13757,
  "formatted_code": true,
  "formatting_response_tokens": 16022,
  "final_functionality": {
    "score": 8,
    "max_score": 8,
    "percentage": 100.0,
    "passing": true,
    "issues": [],
    "warnings": []
  }
}