{
  "generated_date": "2025-08-06",
  "generated_timestamp": "2025-08-06T03:17:36.559404",
  "model": "gpt-4.1-mini",
  "theme": "open world exploration",
  "prompt": "You are an expert educational game designer. Each day, you will generate a fun, playable math game in JavaScript for children ages 7 to 9, focused on foundational concepts. Today's theme: open world exploration\n\nThe game must:\n\u2022 Be engaging and fun first by having a primary visually interesting game mechanic, age-appropriate, and suitable for early learners.\n\u2022 Reinforce the math concept through a real-world narratives tied to theme.\n\u2022 Include fun, unique memorable characters tied to the theme.\n\u2022 Use visually calming and interesting and wacky elements.\n\u2022 Include sound, using the Web Audio API for correct/incorrect feedback, gentle background effects, or interactions.\n\u2022 Render entirely inside the existing HTML element with ID game-of-the-day-stage. You may create a <canvas> inside it.\n\u2022 Have a game area exactly 720px wide by 480px tall.\n\u2022 Be written in clean, readable JavaScript with proper formatting, indentation, and comments.\n\u2022 Use modern JavaScript practices and avoid minification.\n\u2022 Include proper error handling for audio and resource loading.\n\u2022 Be accessible: include keyboard controls, text alternatives, visual cues for audio, clear instructions, and error handling.\n\u2022 Use ONLY canvas-drawn graphics and Web Audio API - NO external image URLs, NO external audio files, NO external dependencies.\n\u2022 Create all visual elements using canvas drawing methods (rect, arc, fillText, etc.).\n\u2022 Generate all sounds using Web Audio API oscillators and filters.\n\u2022 Include proper error handling for audio context creation.\n\u2022 Output only JavaScript code. No extra explanation, no markdown formatting, no code blocks, no HTML, no CSS.\n\u2022 Do not wrap the code in ```javascript or any other markdown formatting.",
  "response_tokens": 5958,
  "game_filename": "2025-08-06.js",
  "game_size_bytes": 19816,
  "functionality": {
    "score": 8,
    "max_score": 8,
    "percentage": 100.0,
    "passing": true,
    "issues": [],
    "warnings": []
  },
  "dependencies": {
    "has_external_deps": false,
    "issues": [],
    "warnings": [],
    "canvas_methods_used": 6
  },
  "improved_visuals_audio": true,
  "improve_prompt": "You are an expert educational game designer. \nTake the following JavaScript game code and improve ONLY the visuals and audio. \nDo not change the game mechanics or math logic. \nEnhance the visual appeal (colors, animations, backgrounds, characters), avoid overstimulation with sounds and visuals, and add or improve sound effects and background audio. \nRender entirely inside the existing HTML element with ID game-of-the-day-stage. You may create a <canvas> inside it.\nHave a game area exactly 720px wide by 480px tall.\nBe written in clean, readable JavaScript with proper formatting, indentation, and comments.\nUse modern JavaScript practices and avoid minification.\nInclude proper error handling for audio and resource loading.\nUse ONLY canvas-drawn graphics and Web Audio API - NO external image URLs, NO external audio files, NO external dependencies.\nCreate all visual elements using canvas drawing methods (rect, arc, fillText, etc.).\nGenerate all sounds using Web Audio API oscillators and filters.\nInclude proper error handling for audio context creation.\nOutput only JavaScript code. No extra explanation, no markdown formatting, no code blocks.\nDo not wrap the code in ```javascript or any other markdown formatting.\n\n---\n// Math open world exploration game for ages 7-9\n// Theme: Exploring a colorful island to collect magic fruit by solving addition problems\n// Render inside #game-of-the-day-stage, 720x480 canvas\n// Use canvas-only graphics & Web Audio API only (no external assets)\n// Keyboard controls, text instructions, visual cues, error handling included\n\n(() => {\n  const stage = document.getElementById(\"game-of-the-day-stage\");\n  if (!stage) {\n    console.error(\"Element with ID 'game-of-the-day-stage' not found.\");\n    return;\n  }\n  const CANVAS_WIDTH = 720;\n  const CANVAS_HEIGHT = 480;\n\n  // Clear stage, create canvas\n  stage.innerHTML = \"\";\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = CANVAS_WIDTH;\n  canvas.height = CANVAS_HEIGHT;\n  canvas.tabIndex = 0; // make focusable for keyboard controls\n  canvas.setAttribute(\"aria-label\", \"Open world math exploration game\");\n  stage.appendChild(canvas);\n\n  const ctx = canvas.getContext(\"2d\");\n\n  // Audio setup and helper functions\n  let audioCtx;\n  try {\n    window.AudioContext = window.AudioContext || window.webkitAudioContext;\n    audioCtx = new AudioContext();\n  } catch (e) {\n    console.warn(\"Web Audio API not supported or failed: \", e);\n    audioCtx = null;\n  }\n\n  // Play sound helpers\n  function playTone(freq, duration, type = \"sine\") {\n    if (!audioCtx) return;\n    try {\n      const oscillator = audioCtx.createOscillator();\n      const gainNode = audioCtx.createGain();\n      oscillator.connect(gainNode);\n      gainNode.connect(audioCtx.destination);\n      oscillator.type = type;\n      oscillator.frequency.value = freq;\n      gainNode.gain.setValueAtTime(0.1, audioCtx.currentTime);\n      oscillator.start();\n      gainNode.gain.exponentialRampToValueAtTime(\n        0.0001,\n        audioCtx.currentTime + duration\n      );\n      oscillator.stop(audioCtx.currentTime + duration);\n    } catch (e) {\n      console.warn(\"Audio playback error\", e);\n    }\n  }\n  function playCorrectSound() {\n    // Joyful quick ascending arpeggio\n    if (!audioCtx) return;\n    try {\n      let now = audioCtx.currentTime;\n      let freqs = [440, 660, 880, 990];\n      freqs.forEach((f, i) => {\n        const osc = audioCtx.createOscillator();\n        const gain = audioCtx.createGain();\n        osc.connect(gain);\n        gain.connect(audioCtx.destination);\n        osc.type = \"triangle\";\n        osc.frequency.value = f;\n        gain.gain.setValueAtTime(0.12, now + 0.15 * i);\n        osc.start(now + 0.15 * i);\n        gain.gain.exponentialRampToValueAtTime(\n          0.0001,\n          now + 0.15 * i + 0.1\n        );\n        osc.stop(now + 0.15 * i + 0.1);\n      });\n    } catch (e) {\n      console.warn(\"Correct sound playback error\", e);\n    }\n  }\n  function playIncorrectSound() {\n    // Single low buzz sound\n    if (!audioCtx) return;\n    try {\n      const osc = audioCtx.createOscillator();\n      const gain = audioCtx.createGain();\n      osc.connect(gain);\n      gain.connect(audioCtx.destination);\n      osc.type = \"square\";\n      osc.frequency.value = 120;\n      gain.gain.setValueAtTime(0.12, audioCtx.currentTime);\n      osc.start();\n      gain.gain.exponentialRampToValueAtTime(0.0001, audioCtx.currentTime + 0.4);\n      osc.stop(audioCtx.currentTime + 0.4);\n    } catch (e) {\n      console.warn(\"Incorrect sound playback error\", e);\n    }\n  }\n  function playBackgroundAmbience() {\n    if (!audioCtx) return null;\n    try {\n      const osc = audioCtx.createOscillator();\n      const gain = audioCtx.createGain();\n      osc.type = \"triangle\";\n      osc.frequency.value = 220;\n      gain.gain.setValueAtTime(0.02, audioCtx.currentTime);\n      osc.connect(gain);\n      gain.connect(audioCtx.destination);\n      osc.start();\n      // Slowly vary the frequency for gentle movement\n      let freqStart = 210;\n      let freqEnd = 230;\n      let direction = 1;\n      let interval = setInterval(() => {\n        if (!audioCtx) return;\n        if (direction > 0) {\n          freqStart += 0.2;\n          if (freqStart >= freqEnd) direction = -1;\n        } else {\n          freqStart -= 0.2;\n          if (freqStart <= 210) direction = 1;\n        }\n        osc.frequency.setValueAtTime(freqStart, audioCtx.currentTime);\n      }, 200);\n      return {\n        stop: () => {\n          clearInterval(interval);\n          osc.stop();\n        }\n      };\n    } catch (e) {\n      console.warn(\"Background ambience error\", e);\n      return null;\n    }\n  }\n\n  // Game variables and constants\n  const TILE_SIZE = 48;\n  const ROWS = 10;\n  const COLS = 15;\n\n  // Player variables\n  const player = {\n    x: 1,\n    y: 1,\n    color: \"#FF7F50\", // coral orange\n    radius: 18,\n    speed: 1,\n  };\n  // Character name: \"Zappy\" - a quirky electric parrot explorer\n  // Zappy's tail feathers crackle with tiny lightning bolts occasionally\n\n  // Magic fruits scattered on island, each with an addition problem displayed\n  // Player collects fruit by answering addition questions to unlock them.\n\n  // Fruit types/colors/colors will be whimsical\n  const fruitTypes = [\n    { name: \"Mystic Mango\", color: \"#F4C430\" },  // bright golden yellow\n    { name: \"Rainbow Berry\", color: \"#9B30FF\" },  // electric purple\n    { name: \"Bubble Banana\", color: \"#FFE135\" },  // pale bright yellow\n    { name: \"Tickle Tomato\", color: \"#FF6347\" },  // soft red orange\n  ];\n\n  // Island map array: 2D grid where 0 = empty grass, 1 = tree obstacle, 2 = fruit\n  // Create a simple island with scattered trees and fruits\n  const islandMap = [];\n  for (let r = 0; r < ROWS; r++) {\n    islandMap[r] = [];\n    for (let c = 0; c < COLS; c++) {\n      if (r === 0 || r === ROWS-1 || c === 0 || c === COLS-1) {\n        islandMap[r][c] = 1; // border trees\n      } else {\n        islandMap[r][c] = 0; // start empty grass\n      }\n    }\n  }\n  // Add some random tree obstacles inside island (15 trees)\n  function getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n  let treeCount = 0;\n  while (treeCount < 15) {\n    let r = getRandomInt(2, ROWS - 3);\n    let c = getRandomInt(2, COLS - 3);\n    if (islandMap[r][c] === 0 && (r !== player.y || c !== player.x)) {\n      islandMap[r][c] = 1;\n      treeCount++;\n    }\n  }\n  // Add fruit positions with math problems\n  // 8 fruits randomly positioned, no conflicts with trees or player start\n  const fruits = [];\n  while (fruits.length < 8) {\n    let r = getRandomInt(1, ROWS - 2);\n    let c = getRandomInt(1, COLS - 2);\n    if (\n      islandMap[r][c] === 0 &&\n      !(r === player.y && c === player.x) &&\n      !fruits.some(f => f.x === c && f.y === r)\n    ) {\n      // Add random addition problem 2-digit + 1-digit sums to age-appropriate\n      let addend1 = getRandomInt(5, 20);\n      let addend2 = getRandomInt(1, 9);\n      fruits.push({\n        x: c,\n        y: r,\n        type: fruitTypes[getRandomInt(0, fruitTypes.length - 1)],\n        question: `${addend1} + ${addend2}`,\n        answer: addend1 + addend2,\n        collected: false,\n      });\n      islandMap[r][c] = 2; // mark fruit presence\n    }\n  }\n\n  // Track game state\n  let inputAnswer = \"\";\n  let currentFruit = null; // fruit player is answering for\n  let message = \"Explore the island! Use arrow keys to move. Collect magic fruit by solving addition.\";\n  let showMessageTimer = 0;\n  const SHOW_MESSAGE_DURATION = 4000;\n  const collectedCount = { count: 0 };\n\n  // Keyboard input handling\n  const keys = {};\n  canvas.addEventListener(\"keydown\", e => {\n    e.preventDefault();\n    keys[e.key] = true;\n    if (e.key === \"Enter\" || e.key === \"NumpadEnter\") {\n      if (currentFruit) {\n        checkAnswer();\n      }\n    }\n    if (e.key === \"Backspace\") {\n      if (currentFruit) {\n        inputAnswer = inputAnswer.slice(0, -1);\n      }\n    }\n    if (currentFruit && /^[0-9]$/.test(e.key)) {\n      // Allow numbers input (only digits)\n      inputAnswer += e.key;\n      if (inputAnswer.length > 3) inputAnswer = inputAnswer.slice(0, 3); // limit input length\n    }\n  });\n  canvas.addEventListener(\"keyup\", e => {\n    e.preventDefault();\n    keys[e.key] = false;\n  });\n\n  // Check if move is possible (no trees, within borders)\n  function canMoveTo(x, y) {\n    if (x < 0 || x >= COLS || y < 0 || y >= ROWS) return false;\n    if (islandMap[y][x] === 1) return false;\n    return true;\n  }\n\n  // Check if tile has collectible fruit\n  function getFruitAt(x, y) {\n    for (const f of fruits) {\n      if (f.x === x && f.y === y && !f.collected) return f;\n    }\n    return null;\n  }\n\n  // Check player's current tile and possibly trigger question mode\n  function checkForFruitCollection() {\n    if (currentFruit) return; // already in question mode\n    const f = getFruitAt(player.x, player.y);\n    if (f) {\n      currentFruit = f;\n      inputAnswer = \"\";\n      message = `Solve: ${f.question} = ? (type answer and press Enter)`;\n      playTone(660, 0.15, \"square\"); // playful chime to indicate question start\n      showMessageTimer = SHOW_MESSAGE_DURATION;\n    }\n  }\n\n  // Check submitted answer\n  function checkAnswer() {\n    if (!currentFruit) return;\n    const submitted = Number(inputAnswer);\n    if (isNaN(submitted)) {\n      // Invalid input\n      message = \"Please enter a number.\";\n      playIncorrectSound();\n      showMessageTimer = SHOW_MESSAGE_DURATION;\n      inputAnswer = \"\";\n      return;\n    }\n    if (submitted === currentFruit.answer) {\n      // Correct\n      currentFruit.collected = true;\n      collectedCount.count++;\n      message = `Correct! You collected the ${currentFruit.type.name}! Total fruits: ${collectedCount.count}/8`;\n      playCorrectSound();\n      currentFruit = null;\n      inputAnswer = \"\";\n      showMessageTimer = SHOW_MESSAGE_DURATION;\n      if (collectedCount.count === fruits.length) {\n        message = \"Wow! You collected all the magic fruit! You are the island hero!\";\n      }\n    } else {\n      // Incorrect\n      message = \"Oops, try again!\";\n      playIncorrectSound();\n      showMessageTimer = SHOW_MESSAGE_DURATION;\n      inputAnswer = \"\";\n    }\n  }\n\n  // Draw a wacky, calming grass tile with some gentle curves and colors\n  function drawGrassTile(x, y) {\n    ctx.fillStyle = \"#A2D149\"; // soft grass green\n    ctx.fillRect(x, y, TILE_SIZE, TILE_SIZE);\n    // Draw some gentle waving blades or dots\n    for (let i = 0; i < 3; i++) {\n      let cx = x + 5 + i * 12 + (Math.sin(Date.now() / 400 + i) * 2);\n      let cy = y + 40 + Math.cos(Date.now() / 400 + i) * 2;\n      ctx.beginPath();\n      ctx.strokeStyle = \"#7BAE2F\";\n      ctx.lineWidth = 2;\n      ctx.moveTo(cx, cy);\n      ctx.lineTo(cx, cy - 10);\n      ctx.stroke();\n    }\n  }\n\n  // Draw a stylized tree obstacle - thick trunk plus spiky leaves blob in calming blue-green hues\n  function drawTreeTile(x, y) {\n    // Draw trunk\n    ctx.fillStyle = \"#6B4226\";\n    ctx.fillRect(x + 18, y + 28, 12, 20);\n    // Draw leaves blob - large dark turquoise circle with spikes\n    ctx.fillStyle = \"#397D6A\";\n    ctx.beginPath();\n    ctx.ellipse(x + 24, y + 20, 18, 22, 0, 0, Math.PI * 2);\n    ctx.fill();\n    // Spikes\n    for (let i = 0; i < 10; i++) {\n      let angle = (Math.PI * 2 / 10) * i;\n      let spikeX = x + 24 + Math.cos(angle) * 18;\n      let spikeY = y + 20 + Math.sin(angle) * 22;\n      ctx.beginPath();\n      ctx.moveTo(spikeX, spikeY);\n      ctx.lineTo(\n        spikeX + Math.cos(angle) * 5,\n        spikeY + Math.sin(angle) * 5\n      );\n      ctx.lineTo(\n        spikeX + Math.cos(angle + 0.1) * 2,\n        spikeY + Math.sin(angle + 0.1) * 2\n      );\n      ctx.fill();\n    }\n  }\n\n  // Draw a magic fruit with wacky shapes depending on type (fruit color)\n  function drawFruit(x, y, color) {\n    // Draw round fruit base\n    ctx.fillStyle = color;\n    ctx.beginPath();\n    ctx.ellipse(x + TILE_SIZE / 2, y + TILE_SIZE / 2, 15, 20, 0, 0, Math.PI * 2);\n    ctx.fill();\n    // Add some whimsical spots/stripes unique per fruit color\n    ctx.fillStyle = \"rgba(255,255,255,0.3)\";\n    for (let i = 0; i < 4; i++) {\n      let offsetX = Math.sin(Date.now() / 300 + i) * 4;\n      let offsetY = Math.cos(Date.now() / 350 + i) * 3;\n      ctx.beginPath();\n      ctx.ellipse(\n        x + TILE_SIZE / 2 + offsetX,\n        y + TILE_SIZE / 2 + offsetY,\n        3,\n        5,\n        Math.PI / 6,\n        0,\n        Math.PI * 2\n      );\n      ctx.fill();\n    }\n  }\n\n  // Draw the player character \"Zappy\" the electric parrot\n  function drawPlayer() {\n    const px = player.x * TILE_SIZE + TILE_SIZE / 2;\n    const py = player.y * TILE_SIZE + TILE_SIZE / 2;\n\n    // Body circle\n    ctx.fillStyle = player.color;\n    ctx.beginPath();\n    ctx.arc(px, py, player.radius, 0, Math.PI * 2);\n    ctx.fill();\n\n    // Eyes - big and curious\n    ctx.fillStyle = \"white\";\n    ctx.beginPath();\n    ctx.arc(px - 8, py - 5, 8, 0, Math.PI * 2);\n    ctx.arc(px + 8, py - 5, 8, 0, Math.PI * 2);\n    ctx.fill();\n    ctx.fillStyle = \"black\";\n    ctx.beginPath();\n    ctx.arc(px - 8, py - 5, 4, 0, Math.PI * 2);\n    ctx.arc(px + 8, py - 5, 4, 0, Math.PI * 2);\n    ctx.fill();\n\n    // Beak - triangle yellow\n    ctx.fillStyle = \"#FFE066\";\n    ctx.beginPath();\n    ctx.moveTo(px, py + 6);\n    ctx.lineTo(px + 16, py + 4);\n    ctx.lineTo(px, py + 14);\n    ctx.closePath();\n    ctx.fill();\n\n    // Tail - 3 crackling feathers with tiny motion & occasional lightning bolt animation\n    const time = Date.now() / 300;\n    const tailStartX = px - 20;\n    const tailStartY = py + 10;\n    for (let i = 0; i < 3; i++) {\n      let baseX = tailStartX - i * 10;\n      let baseY = tailStartY + Math.sin(time + i) * 4;\n      ctx.strokeStyle = \"#ffec99\";\n      ctx.lineWidth = 3;\n      ctx.beginPath();\n      ctx.moveTo(baseX, baseY);\n      ctx.lineTo(baseX - 20, baseY + 10);\n      ctx.stroke();\n\n      // Occasionally flash a tiny lightning bolt on tail feathers\n      if (Math.random() < 0.02) {\n        ctx.strokeStyle = \"#FFFF00\";\n        ctx.lineWidth = 2;\n        ctx.beginPath();\n        ctx.moveTo(baseX - 10, baseY + 2);\n        ctx.lineTo(baseX - 15, baseY + 10);\n        ctx.lineTo(baseX - 5, baseY + 7);\n        ctx.lineTo(baseX - 12, baseY + 18);\n        ctx.stroke();\n      }\n    }\n  }\n\n  // Draw math question input box\n  function drawInputBox() {\n    if (!currentFruit) return;\n    const boxWidth = 280;\n    const boxHeight = 80;\n    const x = (CANVAS_WIDTH - boxWidth) / 2;\n    const y = CANVAS_HEIGHT - boxHeight - 30;\n\n    // Background rectangle\n    ctx.fillStyle = \"rgba(50, 150, 250, 0.8)\";\n    ctx.strokeStyle = \"white\";\n    ctx.lineWidth = 4;\n    ctx.fillRect(x, y, boxWidth, boxHeight);\n    ctx.strokeRect(x, y, boxWidth, boxHeight);\n\n    // Prompt text\n    ctx.fillStyle = \"white\";\n    ctx.font = \"22px Comic Sans MS, cursive, sans-serif\";\n    ctx.textAlign = \"center\";\n    ctx.fillText(`Solve: ${currentFruit.question}`, x + boxWidth / 2, y + 30);\n\n    // Input text with blinking cursor\n    ctx.font = \"28px Arial, sans-serif\";\n    const displayText = inputAnswer + (Math.floor(Date.now() / 500) % 2 === 0 ? \"|\" : \"\");\n    ctx.fillText(displayText, x + boxWidth / 2, y + 65);\n  }\n\n  // Draw collected fruit count in top left\n  function drawHUD() {\n    ctx.fillStyle = \"#222\";\n    ctx.font = \"20px Arial, sans-serif\";\n    ctx.textAlign = \"left\";\n    ctx.fillText(`Magic fruits collected: ${collectedCount.count} / ${fruits.length}`, 12, 28);\n    // Display current message below\n    ctx.fillStyle = \"#004080\";\n    ctx.font = \"18px Comic Sans MS, cursive\";\n    ctx.textAlign = \"center\";\n    ctx.fillText(message, CANVAS_WIDTH / 2, CANVAS_HEIGHT - 8);\n  }\n\n  // Draw entire map + objects + player\n  function draw() {\n    // Clear entire canvas with sky blue background\n    ctx.fillStyle = \"#9BD3E5\"; // calming sky blue\n    ctx.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n\n    // Draw island sand \"beach\" around island edges as beige stripes\n    ctx.fillStyle = \"#F6E7B4\";\n    ctx.fillRect(0, 0, CANVAS_WIDTH, TILE_SIZE);\n    ctx.fillRect(0, CANVAS_HEIGHT - TILE_SIZE, CANVAS_WIDTH, TILE_SIZE);\n    ctx.fillRect(0, 0, TILE_SIZE, CANVAS_HEIGHT);\n    ctx.fillRect(CANVAS_WIDTH - TILE_SIZE, 0, TILE_SIZE, CANVAS_HEIGHT);\n\n    // Draw island terrain tiles (grass, trees, fruits)\n    for (let r = 0; r < ROWS; r++) {\n      for (let c = 0; c < COLS; c++) {\n        const x = c * TILE_SIZE;\n        const y = r * TILE_SIZE;\n        if (islandMap[r][c] === 0) {\n          drawGrassTile(x, y);\n        } else if (islandMap[r][c] === 1) {\n          drawTreeTile(x, y);\n        } else if (islandMap[r][c] === 2) {\n          // Draw grass as base\n          drawGrassTile(x, y);\n          // Draw fruit if not collected\n          const fruit = getFruitAt(c, r);\n          if (fruit) {\n            drawFruit(x, y, fruit.type.color);\n          }\n        }\n      }\n    }\n\n    // Draw player on top\n    drawPlayer();\n\n    // Draw input box if answering question\n    drawInputBox();\n\n    // Draw HUD info\n    drawHUD();\n\n    // Visual cue for audio on/off: show icon top right corner\n    drawAudioIcon();\n  }\n\n  // Draw audio icon: speaker shape with waves if audio context running\n  function drawAudioIcon() {\n    const size = 28;\n    const margin = 12;\n    const x = CANVAS_WIDTH - size - margin;\n    const y = margin + size / 2;\n\n    ctx.lineWidth = 2;\n    ctx.strokeStyle = \"#555\";\n    ctx.fillStyle = \"#99ccff\";\n\n    // Speaker base\n    ctx.beginPath();\n    ctx.moveTo(x - 10, y + 10);\n    ctx.lineTo(x, y + 10);\n    ctx.lineTo(x + 10, y);\n    ctx.lineTo(x, y - 10);\n    ctx.lineTo(x - 10, y - 10);\n    ctx.closePath();\n    ctx.fill();\n    ctx.stroke();\n\n    if (audioCtx && audioCtx.state === \"running\") {\n      // Draw sound waves (arcs)\n      ctx.beginPath();\n      ctx.strokeStyle = \"#33aa33\";\n      ctx.arc(x + 14, y, 6, -Math.PI / 4, Math.PI / 4);\n      ctx.stroke();\n\n      ctx.beginPath();\n      ctx.arc(x + 18, y, 10, -Math.PI / 6, Math.PI / 6);\n      ctx.stroke();\n    } else {\n      // Draw muted cross\n      ctx.strokeStyle = \"red\";\n      ctx.beginPath();\n      ctx.moveTo(x - 12, y - 12);\n      ctx.lineTo(x + 18, y + 12);\n      ctx.moveTo(x + 18, y - 12);\n      ctx.lineTo(x - 12, y + 12);\n      ctx.stroke();\n    }\n  }\n\n  // Game loop and update movement\n  let lastTime = 0;\n  function update(delta) {\n    // Movement handling - simple grid movement\n    let moved = false;\n    if (!currentFruit) {\n      if (keys[\"ArrowUp\"] && canMoveTo(player.x, player.y - 1)) {\n        player.y -= player.speed;\n        moved = true;\n        keys[\"ArrowUp\"] = false; // single move per key press\n      }\n      if (keys[\"ArrowDown\"] && canMoveTo(player.x, player.y + 1)) {\n        player.y += player.speed;\n        moved = true;\n        keys[\"ArrowDown\"] = false;\n      }\n      if (keys[\"ArrowLeft\"] && canMoveTo(player.x - 1, player.y)) {\n        player.x -= player.speed;\n        moved = true;\n        keys[\"ArrowLeft\"] = false;\n      }\n      if (keys[\"ArrowRight\"] && canMoveTo(player.x + 1, player.y)) {\n        player.x += player.speed;\n        moved = true;\n        keys[\"ArrowRight\"] = false;\n      }\n    }\n\n    if (moved) {\n      message = \"Keep exploring and collecting magic fruit!\";\n      showMessageTimer = SHOW_MESSAGE_DURATION;\n      checkForFruitCollection();\n    }\n\n    if (showMessageTimer > 0) {\n      showMessageTimer -= delta;\n      if (showMessageTimer <= 0) {\n        message = \"\";\n      }\n    }\n  }\n\n  // Main loop\n  function loop(time = 0) {\n    const delta = time - lastTime;\n    lastTime = time;\n\n    update(delta);\n    draw();\n\n    requestAnimationFrame(loop);\n  }\n\n  canvas.focus();\n\n  // Start gentle background ambience sound\n  const bgAmbience = playBackgroundAmbience();\n\n  // Pause/resume audio context on first interaction if needed\n  function resumeAudioContext() {\n    if (audioCtx && audioCtx.state === \"suspended\") {\n      audioCtx.resume();\n    }\n  }\n  window.addEventListener(\"keydown\", resumeAudioContext);\n  window.addEventListener(\"mousedown\", resumeAudioContext);\n  window.addEventListener(\"touchstart\", resumeAudioContext);\n\n  loop();\n})();\n---\n",
  "improve_response_tokens": 13810,
  "formatted_code": true,
  "formatting_response_tokens": 16029,
  "final_functionality": {
    "score": 8,
    "max_score": 8,
    "percentage": 100.0,
    "passing": true,
    "issues": [],
    "warnings": []
  }
}