{
  "generated_date": "2025-08-11",
  "generated_timestamp": "2025-08-11T00:24:22.550079",
  "model": "gpt-5-mini",
  "theme": "electricity",
  "prompt": "You are an expert educational game designer. Each day, you will generate a fun, playable math game in JavaScript for children ages 7 to 9, focused on foundational concepts. Today's theme: electricity\n\nThe game must:\n\u2022 Be engaging and fun first by having a primary visually interesting game mechanic, age-appropriate, and suitable for early learners.\n\u2022 Reinforce the math concept through a real-world narratives tied to theme.\n\u2022 Include fun, unique memorable characters tied to the theme.\n\u2022 Use visually calming and interesting and wacky elements.\n\u2022 Include sound, using the Web Audio API for correct/incorrect feedback, gentle background effects, or interactions.\n\u2022 Render entirely inside the existing HTML element with ID game-of-the-day-stage. You may create a <canvas> inside it.\n\u2022 Have a game area exactly 720px wide by 480px tall.\n\u2022 Be written in clean, readable JavaScript with proper formatting, indentation, and comments.\n\u2022 Use modern JavaScript practices and avoid minification.\n\u2022 Include proper error handling for audio and resource loading.\n\u2022 Be accessible: include keyboard controls, text alternatives, visual cues for audio, clear instructions, and error handling.\n\u2022 Use ONLY canvas-drawn graphics and Web Audio API - NO external image URLs, NO external audio files, NO external dependencies.\n\u2022 Create all visual elements using canvas drawing methods (rect, arc, fillText, etc.).\n\u2022 Generate all sounds using Web Audio API oscillators and filters.\n\u2022 Include proper error handling for audio context creation.\n\u2022 Output only JavaScript code. No extra explanation, no markdown formatting, no code blocks, no HTML, no CSS.\n\u2022 Do not wrap the code in ```javascript or any other markdown formatting.",
  "response_tokens": 9378,
  "game_filename": "2025-08-11.js",
  "game_size_bytes": 26336,
  "functionality": {
    "score": 8,
    "max_score": 8,
    "percentage": 100.0,
    "passing": true,
    "issues": [],
    "warnings": []
  },
  "dependencies": {
    "has_external_deps": false,
    "issues": [],
    "warnings": [],
    "canvas_methods_used": 6
  },
  "improved_visuals_audio": true,
  "improve_prompt": "You are an expert educational game designer. \nTake the following JavaScript game code and improve ONLY the visuals and audio. \nDo not change the game mechanics or math logic. \nEnhance the visual appeal (colors, animations, backgrounds, characters), avoid overstimulation with sounds and visuals, and add or improve sound effects and background audio. \nRender entirely inside the existing HTML element with ID game-of-the-day-stage. You may create a <canvas> inside it.\nHave a game area exactly 720px wide by 480px tall.\nBe written in clean, readable JavaScript with proper formatting, indentation, and comments.\nUse modern JavaScript practices and avoid minification.\nInclude proper error handling for audio and resource loading.\nUse ONLY canvas-drawn graphics and Web Audio API - NO external image URLs, NO external audio files, NO external dependencies.\nCreate all visual elements using canvas drawing methods (rect, arc, fillText, etc.).\nGenerate all sounds using Web Audio API oscillators and filters.\nInclude proper error handling for audio context creation.\nOutput only JavaScript code. No extra explanation, no markdown formatting, no code blocks.\nDo not wrap the code in ```javascript or any other markdown formatting.\n\n---\n(function () {\n  // Spark Squad: Electricity Math Game\n  // Ages 7-9. Connect charges by guiding a spark to number nodes to match device target.\n  // Renders entirely in the element with ID 'game-of-the-day-stage' using a 720x480 canvas.\n  // All graphics drawn with Canvas API. Sounds generated with Web Audio API oscillators.\n  // Accessible: keyboard controls, aria live text updates, visual audio indicator, clear instructions.\n\n  // ---------- Setup and DOM ----------\n  const STAGE_ID = 'game-of-the-day-stage';\n  const WIDTH = 720;\n  const HEIGHT = 480;\n\n  const stage = document.getElementById(STAGE_ID);\n  if (!stage) {\n    console.error(`Game requires an element with id=\"${STAGE_ID}\" to render into.`);\n    return;\n  }\n\n  // Clear existing contents\n  stage.innerHTML = '';\n  stage.style.position = 'relative';\n  stage.style.width = WIDTH + 'px';\n  stage.style.height = HEIGHT + 'px';\n  stage.style.userSelect = 'none';\n\n  // Create canvas\n  const canvas = document.createElement('canvas');\n  canvas.width = WIDTH;\n  canvas.height = HEIGHT;\n  canvas.tabIndex = 0; // make focusable for keyboard\n  canvas.style.outline = 'none';\n  canvas.setAttribute('aria-label', 'Spark Squad math game: use arrow keys or WASD to move the spark, press Space or Enter to use a number node, press M to mute audio. Instructions appear on screen.');\n  stage.appendChild(canvas);\n  const ctx = canvas.getContext('2d');\n\n  // Create an ARIA live region for screen readers (text alternatives)\n  const ariaLive = document.createElement('div');\n  ariaLive.setAttribute('aria-live', 'polite');\n  ariaLive.style.position = 'absolute';\n  ariaLive.style.left = '-9999px';\n  ariaLive.style.width = '1px';\n  ariaLive.style.height = '1px';\n  ariaLive.style.overflow = 'hidden';\n  stage.appendChild(ariaLive);\n\n  // ---------- Audio Setup ----------\n\n  let audioEnabled = true;\n  let audioCtx = null;\n  let masterGain = null;\n  let bgOsc = null;\n  try {\n    const AudioContext = window.AudioContext || window.webkitAudioContext;\n    audioCtx = new AudioContext();\n    // Some browsers require user gesture; start/resume later on first interaction\n    masterGain = audioCtx.createGain();\n    masterGain.gain.value = 0.18;\n    masterGain.connect(audioCtx.destination);\n\n    // Background gentle hum using oscillator + lowpass\n    bgOsc = audioCtx.createOscillator();\n    const bgGain = audioCtx.createGain();\n    bgOsc.type = 'sine';\n    bgOsc.frequency.value = 110; // gentle\n    bgGain.gain.value = 0.03;\n    const bgFilter = audioCtx.createBiquadFilter();\n    bgFilter.type = 'lowpass';\n    bgFilter.frequency.value = 600;\n    bgOsc.connect(bgFilter);\n    bgFilter.connect(bgGain);\n    bgGain.connect(masterGain);\n    bgOsc.start();\n  } catch (err) {\n    audioEnabled = false;\n    console.warn('Web Audio API unavailable or denied by browser. Continuing without audio.', err);\n  }\n\n  function resumeAudioIfNeeded() {\n    if (!audioEnabled || !audioCtx) return;\n    if (audioCtx.state === 'suspended') {\n      audioCtx.resume().catch((e) => {\n        console.warn('AudioContext resume failed:', e);\n      });\n    }\n  }\n\n  function playTone(freq, duration = 0.22, type = 'sine', when = 0, volume = 0.12) {\n    if (!audioEnabled || !audioCtx) return;\n    try {\n      const osc = audioCtx.createOscillator();\n      const gain = audioCtx.createGain();\n      const filter = audioCtx.createBiquadFilter();\n      osc.type = type;\n      osc.frequency.value = freq;\n      filter.type = 'lowpass';\n      filter.frequency.value = Math.max(300, freq * 2);\n      gain.gain.value = volume;\n      osc.connect(filter);\n      filter.connect(gain);\n      gain.connect(masterGain);\n      const start = audioCtx.currentTime + when;\n      osc.start(start);\n      gain.gain.setValueAtTime(volume, start);\n      gain.gain.exponentialRampToValueAtTime(0.0001, start + duration);\n      osc.stop(start + duration + 0.02);\n    } catch (e) {\n      console.warn('playTone failed', e);\n    }\n  }\n\n  function playChime() {\n    // joyful chord\n    playTone(740, 0.14, 'sine', 0, 0.06);\n    playTone(1046, 0.2, 'triangle', 0.02, 0.06);\n    playTone(523, 0.26, 'sine', 0.04, 0.06);\n  }\n\n  function playBuzzer() {\n    // incorrect buzz\n    if (!audioEnabled || !audioCtx) return;\n    try {\n      const t = audioCtx.currentTime;\n      const o = audioCtx.createOscillator();\n      const g = audioCtx.createGain();\n      o.type = 'square';\n      o.frequency.value = 160;\n      g.gain.value = 0.12;\n      o.connect(g);\n      g.connect(masterGain);\n      o.start(t);\n      o.frequency.exponentialRampToValueAtTime(60, t + 0.18);\n      g.gain.exponentialRampToValueAtTime(0.0001, t + 0.2);\n      o.stop(t + 0.22);\n    } catch (e) {\n      console.warn('playBuzzer failed', e);\n    }\n  }\n\n  // ---------- Game State ----------\n\n  const characters = {\n    battery: {\n      name: 'Volt',\n      color: '#FFD166',\n      eyeColor: '#333'\n    },\n    helper: {\n      name: 'Ohma',\n      color: '#BDE0FE'\n    }\n  };\n\n  let level = 1;\n  const maxLevels = 5;\n\n  // Game objects: nodes (number nodes), battery charge, device\n  let nodes = [];\n  let battery = {\n    x: 90,\n    y: 100,\n    radius: 48,\n    charge: 0\n  };\n\n  let device = {\n    x: WIDTH - 130,\n    y: 100,\n    radius: 52,\n    target: 0\n  };\n\n  // Spark controlled by player\n  const spark = {\n    x: 360,\n    y: 320,\n    r: 12,\n    vx: 0,\n    vy: 0,\n    speed: 2.6\n  };\n\n  let usedNodes = new Set();\n  let message = 'Welcome to Spark Squad! Move the spark to number nodes and press Space/Enter to change the battery charge. When the battery shows the same number as the device, go to the device and press Enter to finish!';\n  let msgTimer = 0;\n  let showHelp = true;\n  let muted = false;\n\n  // Keyboard state\n  const keys = {};\n\n  // Visual audio indicator tick state\n  let audioIndicatorPulse = 0;\n\n  // Accessibility announcements\n  function announce(text) {\n    ariaLive.textContent = text;\n  }\n\n  // ---------- Utilities ----------\n  function randInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  function distance(a, b) {\n    const dx = a.x - b.x;\n    const dy = a.y - b.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  // Ensure we generate nodes with unique positions and accessible sizes\n  function generateLevel(lv) {\n    nodes = [];\n    usedNodes.clear();\n    // battery and device baseline positions (left and right)\n    battery.charge = randInt(0, 6);\n    device.target = Math.min(20, Math.max(1, battery.charge + randInt(-3, 8)));\n    // Ensure target positive\n    device.target = Math.max(0, device.target);\n\n    // number of nodes depends on level (3-6)\n    const nodeCount = Math.min(7, 3 + Math.floor(lv / 1.5));\n    const available = [];\n    for (let i = 0; i < nodeCount; i++) {\n      // nodes are scattered in play area avoiding battery and device\n      let tries = 0;\n      while (tries < 60) {\n        const x = randInt(160, WIDTH - 160);\n        const y = randInt(140, HEIGHT - 60);\n        const r = 26;\n        const distToBattery = Math.hypot(x - battery.x, y - battery.y);\n        const distToDevice = Math.hypot(x - device.x, y - device.y);\n        let ok = distToBattery > 110 && distToDevice > 100;\n        for (const n of available) {\n          if (Math.hypot(x - n.x, y - n.y) < 72) {\n            ok = false;\n            break;\n          }\n        }\n        if (ok) {\n          // number value: mostly small ints between -6 and +8; increase with level\n          const magnitude = Math.min(9, 3 + Math.floor(lv / 2));\n          // favor positive numbers slightly\n          let val;\n          if (Math.random() < 0.7) {\n            val = randInt(1, magnitude);\n          } else {\n            val = -randInt(1, Math.max(1, Math.min(6, Math.floor(magnitude / 1.5))));\n          }\n          available.push({ x, y, r, val });\n          break;\n        }\n        tries++;\n      }\n    }\n\n    // Add a couple of operator-style nodes (double value or zeroing) occasionally as fun wacky elements for older levels\n    if (lv >= 3 && Math.random() < 0.6) {\n      const x = randInt(220, WIDTH - 220);\n      const y = randInt(180, HEIGHT - 80);\n      available.push({ x, y, r: 30, val: 'x2' });\n    }\n\n    nodes = available;\n    // Reset spark to a safe spot\n    spark.x = WIDTH / 2;\n    spark.y = HEIGHT - 80;\n    spark.vx = 0;\n    spark.vy = 0;\n\n    // Announce level\n    announce(`Level ${lv}. Battery ${battery.charge}. Device target ${device.target}. Use number nodes to reach the target.`);\n    message = `Level ${lv}: Guide the spark to nodes, press Space/Enter to apply. Battery shows ${battery.charge}. Target ${device.target}. Press M to mute/unmute.`;\n    msgTimer = 300;\n  }\n\n  // ---------- Interaction Handlers ----------\n  canvas.addEventListener('keydown', (e) => {\n    // Ensure audio resumes on first interaction\n    resumeAudioIfNeeded();\n    keys[e.key.toLowerCase()] = true;\n\n    // M mute toggle\n    if (e.key.toLowerCase() === 'm') {\n      muted = !muted;\n      if (masterGain) masterGain.gain.value = muted ? 0 : 0.18;\n      announce(muted ? 'Audio muted' : 'Audio unmuted');\n    }\n\n    // Enter/Space for interactions\n    if (e.key === ' ' || e.key === 'Enter') {\n      e.preventDefault();\n      handleUseNodeOrDevice();\n    }\n\n    // H toggles help overlay\n    if (e.key.toLowerCase() === 'h') {\n      showHelp = !showHelp;\n      announce(showHelp ? 'Help shown' : 'Help hidden');\n    }\n  });\n\n  canvas.addEventListener('keyup', (e) => {\n    keys[e.key.toLowerCase()] = false;\n  });\n\n  // Mouse/touch controls: move spark by clicking/tapping position; click on node applies value\n  canvas.addEventListener('mousedown', (e) => {\n    resumeAudioIfNeeded();\n    const rect = canvas.getBoundingClientRect();\n    const mx = e.clientX - rect.left;\n    const my = e.clientY - rect.top;\n    // Teleport the spark toward click instantly for easy control\n    spark.x = mx;\n    spark.y = my;\n    // If clicked on node or device, apply\n    const targetNode = nodes.findIndex((n, i) => {\n      const d = Math.hypot(mx - n.x, my - n.y);\n      return d <= n.r + spark.r + 4 && !usedNodes.has(i);\n    });\n    if (targetNode >= 0) {\n      applyNode(targetNode);\n    } else {\n      // check device\n      const dDevice = Math.hypot(mx - device.x, my - device.y);\n      if (dDevice <= device.radius + spark.r + 4) {\n        submitToDevice();\n      }\n    }\n  });\n\n  canvas.addEventListener('touchstart', (e) => {\n    e.preventDefault();\n    resumeAudioIfNeeded();\n    const rect = canvas.getBoundingClientRect();\n    const t = e.touches[0];\n    const mx = t.clientX - rect.left;\n    const my = t.clientY - rect.top;\n    spark.x = mx;\n    spark.y = my;\n  }, { passive: false });\n\n  // Use node or device at current spark location\n  function handleUseNodeOrDevice() {\n    // find overlapping unused node\n    for (let i = 0; i < nodes.length; i++) {\n      if (usedNodes.has(i)) continue;\n      const n = nodes[i];\n      if (Math.hypot(spark.x - n.x, spark.y - n.y) <= n.r + spark.r + 4) {\n        applyNode(i);\n        return;\n      }\n    }\n    // if not on a node, check device\n    if (Math.hypot(spark.x - device.x, spark.y - device.y) <= device.radius + spark.r + 4) {\n      submitToDevice();\n      return;\n    }\n    // nothing interactive\n    message = 'Move closer to a node or the device, then press Space or Enter.';\n    msgTimer = 120;\n    playTone(220, 0.08, 'sawtooth', 0, 0.06);\n  }\n\n  function applyNode(i) {\n    const n = nodes[i];\n    // cannot apply non-number nodes more than once either\n    if (usedNodes.has(i)) return;\n    // Apply based on n.val\n    if (typeof n.val === 'number') {\n      const prev = battery.charge;\n      battery.charge = Math.max(0, Math.min(99, battery.charge + n.val));\n      usedNodes.add(i);\n      msgTimer = 180;\n      message = `${characters.battery.name} changed from ${prev} by ${n.val} \u2192 ${battery.charge}.`;\n      announce(message);\n      playTone(n.val > 0 ? 660 : 280, 0.12, n.val > 0 ? 'triangle' : 'sine', 0, 0.07);\n    } else if (n.val === 'x2') {\n      const prev = battery.charge;\n      battery.charge = Math.max(0, Math.min(99, battery.charge * 2));\n      usedNodes.add(i);\n      msgTimer = 200;\n      message = `${characters.battery.name}'s charge doubled: ${prev} \u2192 ${battery.charge}.`;\n      announce(message);\n      playTone(880, 0.16, 'sine', 0, 0.08);\n      playTone(440, 0.12, 'sine', 0.06, 0.06);\n    } else {\n      // unknown node\n      usedNodes.add(i);\n      message = 'Hmm, this node flickered but nothing happened.';\n      msgTimer = 140;\n      playTone(300, 0.12, 'sine', 0, 0.05);\n    }\n  }\n\n  function submitToDevice() {\n    // Try to finish level\n    if (battery.charge === device.target) {\n      // success\n      message = `Success! ${characters.battery.name} powered the device!`;\n      announce(message);\n      playChime();\n      msgTimer = 240;\n      level = Math.min(maxLevels, level + 1);\n      setTimeout(() => {\n        generateLevel(level);\n      }, 900);\n    } else {\n      // incorrect\n      const diff = battery.charge - device.target;\n      message = `Not quite. Battery ${battery.charge} vs target ${device.target}. Try using nodes to adjust by ${Math.abs(diff)} ${diff > 0 ? 'less' : 'more'}.`;\n      announce(message);\n      msgTimer = 260;\n      playBuzzer();\n      // gentle shake: nudge spark away\n      spark.vx = (Math.random() - 0.5) * 6;\n      spark.vy = -Math.random() * 3 - 1;\n    }\n  }\n\n  // ---------- Drawing ----------\n  function drawBackground() {\n    // Calming pastel gradient sky\n    const g = ctx.createLinearGradient(0, 0, 0, HEIGHT);\n    g.addColorStop(0, '#E8F6FF');\n    g.addColorStop(1, '#F9FFF6');\n    ctx.fillStyle = g;\n    ctx.fillRect(0, 0, WIDTH, HEIGHT);\n\n    // Wacky floating shapes (soft pastel clouds and squiggles)\n    for (let i = 0; i < 5; i++) {\n      ctx.beginPath();\n      const cx = (i * 160 + (Date.now() / 100) % 160) % WIDTH;\n      ctx.fillStyle = i % 2 ? 'rgba(189,224,254,0.12)' : 'rgba(255,209,102,0.08)';\n      ctx.ellipse(cx, 60 + i * 8, 70 - i * 8, 22 + (i % 2) * 6, 0, 0, Math.PI * 2);\n      ctx.fill();\n    }\n  }\n\n  function drawBattery(x, y, r, charge) {\n    // Battery character (Volt)\n    // body\n    ctx.save();\n    ctx.translate(x, y);\n    // outer casing\n    ctx.fillStyle = characters.battery.color;\n    roundRect(ctx, -r + 8, -r + 6, r * 2 - 16, r * 2 - 12, 10);\n    ctx.fill();\n    // top and bottom terminals\n    ctx.fillStyle = '#E9C46A';\n    ctx.fillRect(-r + 18, -r - 6, r - 24, 8);\n    ctx.fillRect(r - 18, -r - 6, r - 24, 8);\n    // eyes\n    ctx.fillStyle = characters.battery.eyeColor;\n    ctx.beginPath();\n    ctx.arc(-12, -4, 4, 0, Math.PI * 2);\n    ctx.fill();\n    ctx.beginPath();\n    ctx.arc(12, -4, 4, 0, Math.PI * 2);\n    ctx.fill();\n    // smile\n    ctx.strokeStyle = '#6B6B6B';\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n    ctx.arc(0, 6, 8, 0.1 * Math.PI, 0.9 * Math.PI);\n    ctx.stroke();\n\n    // charge text center\n    ctx.fillStyle = '#333';\n    ctx.font = 'bold 20px sans-serif';\n    ctx.textAlign = 'center';\n    ctx.fillText(`${charge}C`, 0, 12);\n    ctx.restore();\n\n    // name tag\n    ctx.fillStyle = 'rgba(0,0,0,0.05)';\n    ctx.fillRect(x - 48, y + r - 6, 96, 20);\n    ctx.fillStyle = '#333';\n    ctx.font = '12px sans-serif';\n    ctx.textAlign = 'center';\n    ctx.fillText(characters.battery.name, x, y + r + 8);\n  }\n\n  function drawDevice(x, y, r, target) {\n    // Device with whimsical plug and target number\n    ctx.save();\n    ctx.translate(x, y);\n    // main circle\n    ctx.fillStyle = '#C0F2D8';\n    ctx.beginPath();\n    ctx.arc(0, 0, r, 0, Math.PI * 2);\n    ctx.fill();\n\n    // bolt icon\n    ctx.fillStyle = '#3A86FF';\n    ctx.beginPath();\n    ctx.moveTo(-6, -18);\n    ctx.lineTo(6, -18);\n    ctx.lineTo(0, 6);\n    ctx.lineTo(8, 6);\n    ctx.lineTo(-2, 18);\n    ctx.lineTo(0, 2);\n    ctx.lineTo(-8, 2);\n    ctx.closePath();\n    ctx.fill();\n\n    // target text\n    ctx.fillStyle = '#073B4C';\n    ctx.font = 'bold 18px sans-serif';\n    ctx.textAlign = 'center';\n    ctx.fillText(`${target}C`, 0, 42);\n\n    ctx.restore();\n\n    // helper name\n    ctx.fillStyle = '#333';\n    ctx.font = '12px sans-serif';\n    ctx.textAlign = 'center';\n    ctx.fillText('Gizmo', x, y + r + 12);\n  }\n\n  function drawNode(n, used) {\n    // node orb with number inside\n    ctx.save();\n    ctx.translate(n.x, n.y);\n    // outer glow\n    const glow = ctx.createRadialGradient(0, 0, 4, 0, 0, n.r + 12);\n    glow.addColorStop(0, used ? 'rgba(200,200,200,0.18)' : 'rgba(255,255,255,0.3)');\n    glow.addColorStop(1, 'rgba(0,0,0,0)');\n    ctx.fillStyle = glow;\n    ctx.beginPath();\n    ctx.arc(0, 0, n.r + 14, 0, Math.PI * 2);\n    ctx.fill();\n\n    // circle\n    ctx.beginPath();\n    ctx.fillStyle = used ? '#E8EAF6' : '#FFFFFF';\n    ctx.strokeStyle = used ? '#AAB7D6' : '#8DA1DF';\n    ctx.lineWidth = 3;\n    ctx.arc(0, 0, n.r, 0, Math.PI * 2);\n    ctx.fill();\n    ctx.stroke();\n\n    // sign or number\n    ctx.fillStyle = used ? '#7B8FB8' : '#2B3A67';\n    ctx.font = 'bold 18px sans-serif';\n    ctx.textAlign = 'center';\n    if (typeof n.val === 'number') {\n      const prefix = n.val > 0 ? '+' : '';\n      ctx.fillText(`${prefix}${n.val}`, 0, 6);\n    } else {\n      ctx.fillText(`${n.val}`, 0, 6);\n    }\n\n    // tiny sparkles\n    ctx.fillStyle = 'rgba(255,210,0,0.14)';\n    ctx.beginPath();\n    ctx.ellipse(-n.r / 2, -n.r / 2, 6, 3, Math.PI / 5, 0, Math.PI * 2);\n    ctx.fill();\n    ctx.restore();\n  }\n\n  function drawSpark() {\n    // Glow circle that moves smoothly\n    ctx.save();\n    const gradient = ctx.createRadialGradient(spark.x, spark.y, 0, spark.x, spark.y, 28);\n    gradient.addColorStop(0, 'rgba(255,246,204,0.9)');\n    gradient.addColorStop(1, 'rgba(255,246,204,0)');\n    ctx.fillStyle = gradient;\n    ctx.beginPath();\n    ctx.arc(spark.x, spark.y, 28, 0, Math.PI * 2);\n    ctx.fill();\n\n    // core\n    ctx.beginPath();\n    ctx.fillStyle = '#FFD166';\n    ctx.arc(spark.x, spark.y, spark.r, 0, Math.PI * 2);\n    ctx.fill();\n\n    // little tail flicker\n    ctx.strokeStyle = 'rgba(255,200,80,0.8)';\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n    ctx.moveTo(spark.x - 6, spark.y + 10);\n    ctx.lineTo(spark.x + 10, spark.y + 18);\n    ctx.stroke();\n    ctx.restore();\n  }\n\n  function drawTopBar() {\n    // top area with level and audio status\n    ctx.fillStyle = 'rgba(255,255,255,0.6)';\n    ctx.fillRect(0, 0, WIDTH, 64);\n    ctx.strokeStyle = 'rgba(0,0,0,0.06)';\n    ctx.strokeRect(0, 0, WIDTH, 64);\n\n    ctx.fillStyle = '#073B4C';\n    ctx.font = 'bold 20px sans-serif';\n    ctx.textAlign = 'left';\n    ctx.fillText(`Spark Squad - Level ${level}`, 14, 28);\n\n    ctx.font = '12px sans-serif';\n    ctx.fillStyle = '#16697A';\n    ctx.fillText('Theme: Electricity \u2022 Math: Addition/Subtraction', 14, 46);\n\n    // audio indicator icon\n    ctx.save();\n    const ax = WIDTH - 60;\n    const ay = 22;\n    ctx.translate(ax, ay);\n    ctx.fillStyle = muted ? '#bbb' : '#2B8A8A';\n    ctx.strokeStyle = '#1C3B3B';\n    ctx.lineWidth = 1;\n    // speaker box\n    ctx.beginPath();\n    ctx.moveTo(-12, -8);\n    ctx.lineTo(-4, -8);\n    ctx.lineTo(4, -14);\n    ctx.lineTo(4, 14);\n    ctx.lineTo(-4, 8);\n    ctx.lineTo(-12, 8);\n    ctx.closePath();\n    ctx.fill();\n    // waves if unmuted\n    if (!muted) {\n      ctx.beginPath();\n      ctx.strokeStyle = '#54B4B4';\n      ctx.lineWidth = 2;\n      ctx.arc(8, 0, 8 + Math.sin(audioIndicatorPulse) * 1.5, -0.6, 0.6);\n      ctx.stroke();\n    } else {\n      ctx.strokeStyle = '#E07A5F';\n      ctx.lineWidth = 3;\n      ctx.beginPath();\n      ctx.moveTo(12, -10);\n      ctx.lineTo(-2, 12);\n      ctx.moveTo(-2, -10);\n      ctx.lineTo(12, 12);\n      ctx.stroke();\n    }\n    ctx.restore();\n\n    // small help hint\n    ctx.fillStyle = '#3A3A3A';\n    ctx.font = '11px sans-serif';\n    ctx.textAlign = 'right';\n    ctx.fillText('Arrows/WASD to move, Space/Enter to use node, M mute, H help', WIDTH - 14, 46);\n  }\n\n  // helper: rounded rectangle\n  function roundRect(ctx, x, y, w, h, r) {\n    ctx.beginPath();\n    ctx.moveTo(x + r, y);\n    ctx.arcTo(x + w, y, x + w, y + h, r);\n    ctx.arcTo(x + w, y + h, x, y + h, r);\n    ctx.arcTo(x, y + h, x, y, r);\n    ctx.arcTo(x, y, x + w, y, r);\n    ctx.closePath();\n  }\n\n  function drawMessagePanel() {\n    // bottom panel with status and hints\n    ctx.fillStyle = 'rgba(255,255,255,0.72)';\n    roundRect(ctx, 10, HEIGHT - 100, WIDTH - 20, 90, 10);\n    ctx.fill();\n\n    ctx.fillStyle = '#233044';\n    ctx.font = '14px sans-serif';\n    ctx.textAlign = 'left';\n    const wrapText = (text, x, y, maxW, lineH) => {\n      const words = text.split(' ');\n      let line = '';\n      for (let n = 0; n < words.length; n++) {\n        const testLine = line + words[n] + ' ';\n        const metrics = ctx.measureText(testLine);\n        if (metrics.width > maxW && n > 0) {\n          ctx.fillText(line, x, y);\n          line = words[n] + ' ';\n          y += lineH;\n        } else {\n          line = testLine;\n        }\n      }\n      ctx.fillText(line, x, y);\n    };\n    wrapText(message, 28, HEIGHT - 70, WIDTH - 80, 18);\n\n    // keyboard hint icon\n    ctx.fillStyle = '#2B8A8A';\n    ctx.fillRect(WIDTH - 140, HEIGHT - 86, 110, 58);\n    ctx.fillStyle = '#FFF';\n    ctx.font = '13px sans-serif';\n    ctx.textAlign = 'center';\n    ctx.fillText('Interact: Space / Enter', WIDTH - 85, HEIGHT - 50);\n    ctx.fillText('Mute: M  Help: H', WIDTH - 85, HEIGHT - 34);\n  }\n\n  // ---------- Update Loop ----------\n  let lastTime = performance.now();\n  function update(now) {\n    const dt = Math.min(50, now - lastTime) / 16.666;\n    lastTime = now;\n\n    // movement input\n    let dx = 0;\n    let dy = 0;\n    if (keys['arrowleft'] || keys['a']) dx -= 1;\n    if (keys['arrowright'] || keys['d']) dx += 1;\n    if (keys['arrowup'] || keys['w']) dy -= 1;\n    if (keys['arrowdown'] || keys['s']) dy += 1;\n    // normalize\n    if (dx !== 0 || dy !== 0) {\n      const len = Math.sqrt(dx * dx + dy * dy);\n      dx /= len;\n      dy /= len;\n      spark.vx += dx * spark.speed * 0.2 * dt;\n      spark.vy += dy * spark.speed * 0.2 * dt;\n    } else {\n      // gentle drag\n      spark.vx *= 0.92;\n      spark.vy *= 0.92;\n    }\n\n    // clamp velocity\n    spark.vx = Math.max(-6, Math.min(6, spark.vx));\n    spark.vy = Math.max(-6, Math.min(6, spark.vy));\n\n    spark.x += spark.vx;\n    spark.y += spark.vy;\n\n    // bounds\n    spark.x = Math.max(16, Math.min(WIDTH - 16, spark.x));\n    spark.y = Math.max(80, Math.min(HEIGHT - 16, spark.y));\n\n    // audio indicator pulse increment\n    audioIndicatorPulse += 0.09;\n\n    // message timer\n    if (msgTimer > 0) msgTimer--;\n\n    // render\n    render();\n\n    requestAnimationFrame(update);\n  }\n\n  // ---------- Render ----------\n  function render() {\n    ctx.clearRect(0, 0, WIDTH, HEIGHT);\n    drawBackground();\n    drawTopBar();\n\n    // left battery and right device\n    drawBattery(battery.x, battery.y, battery.radius, battery.charge);\n    drawDevice(device.x, device.y, device.radius, device.target);\n\n    // nodes\n    nodes.forEach((n, i) => {\n      drawNode(n, usedNodes.has(i));\n    });\n\n    // spark\n    drawSpark();\n\n    // draw path ghost to nearest node (visual aid)\n    let nearest = null;\n    let minD = Infinity;\n    for (let i = 0; i < nodes.length; i++) {\n      if (usedNodes.has(i)) continue;\n      const n = nodes[i];\n      const d = Math.hypot(spark.x - n.x, spark.y - n.y);\n      if (d < minD) {\n        minD = d;\n        nearest = n;\n      }\n    }\n    if (nearest && minD < 220) {\n      ctx.strokeStyle = 'rgba(58,134,255,0.18)';\n      ctx.lineWidth = 2;\n      ctx.beginPath();\n      ctx.moveTo(spark.x, spark.y);\n      ctx.quadraticCurveTo((spark.x + nearest.x) / 2, (spark.y + nearest.y) / 2 - 40, nearest.x, nearest.y);\n      ctx.stroke();\n    }\n\n    // instructions and message panel\n    drawMessagePanel();\n\n    // help overlay if requested\n    if (showHelp || msgTimer > 0) {\n      // small translucent hint block near center if help\n      if (showHelp) {\n        ctx.fillStyle = 'rgba(255,255,255,0.88)';\n        roundRect(ctx, 180, 74, 360, 110, 12);\n        ctx.fill();\n        ctx.fillStyle = '#1a3b3b';\n        ctx.font = '14px sans-serif';\n        ctx.textAlign = 'center';\n        ctx.fillText('How to Play', WIDTH / 2, 100);\n        ctx.font = '12px sans-serif';\n        ctx.fillText('1) Move the spark with Arrow keys or WASD.', WIDTH / 2, 122);\n        ctx.fillText('2) Press Space or Enter when touching a number node to change the battery charge.', WIDTH / 2, 142);\n        ctx.fillText('3) When battery charge equals device target, go to the device and press Enter to finish the level.', WIDTH / 2, 162);\n      }\n    }\n  }\n\n  // ---------- Initialization ----------\n  function init() {\n    // Focus canvas for keyboard controls\n    canvas.focus();\n\n    // Start the first level\n    generateLevel(level);\n\n    // Start update loop\n    lastTime = performance.now();\n    requestAnimationFrame(update);\n\n    // Announce starting instructions\n    announce('Spark Squad started. ' + message);\n  }\n\n  // ---------- Error Handling & Start on User Interaction for Audio ----------\n  // Some browsers block audio until user gestures; attach a one-time listener to resume/resumeAudioIfNeeded\n  function initOnFirstGesture() {\n    resumeAudioIfNeeded();\n    canvas.removeEventListener('pointerdown', initOnFirstGesture);\n    canvas.removeEventListener('mousedown', initOnFirstGesture);\n    canvas.removeEventListener('touchstart', initOnFirstGesture);\n  }\n\n  canvas.addEventListener('pointerdown', initOnFirstGesture);\n  canvas.addEventListener('mousedown', initOnFirstGesture);\n  canvas.addEventListener('touchstart', initOnFirstGesture);\n\n  // Focus on click to ensure keyboard works\n  canvas.addEventListener('click', () => {\n    canvas.focus();\n  });\n\n  // Accessibility: provide a small keyboard-only instruction if focus enters\n  canvas.addEventListener('focus', () => {\n    announce('Canvas focused. Use arrow keys or WASD to move the spark. Press Space or Enter to interact with nodes or the device. Press H to toggle help.');\n  });\n\n  // Kick off game\n  try {\n    init();\n  } catch (e) {\n    console.error('Game initialization failed', e);\n    ctx.clearRect(0, 0, WIDTH, HEIGHT);\n    ctx.fillStyle = '#fff';\n    ctx.fillRect(0, 0, WIDTH, HEIGHT);\n    ctx.fillStyle = '#000';\n    ctx.font = '16px sans-serif';\n    ctx.textAlign = 'center';\n    ctx.fillText('An error occurred while starting the game. Please try reloading the page.', WIDTH / 2, HEIGHT / 2);\n    announce('Game failed to start. Please reload the page.');\n  }\n})();\n---\n",
  "improve_response_tokens": 18626,
  "formatted_code": true,
  "formatting_response_tokens": 20043,
  "final_functionality": {
    "score": 8,
    "max_score": 8,
    "percentage": 100.0,
    "passing": true,
    "issues": [],
    "warnings": []
  }
}